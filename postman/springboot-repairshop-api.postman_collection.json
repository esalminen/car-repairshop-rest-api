{
	"info": {
		"_postman_id": "b9b38063-fbf0-48a7-8365-d89091c33cdb",
		"name": "springboot-repairshop-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10665184"
	},
	"item": [
		{
			"name": "Post a customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Create customers amount that is written on collection variable \"customerCount\".\r",
							" * Test 1: Test that each request returns status code 200.\r",
							" */\r",
							"\r",
							"//Test 1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// Track customer amount with id value\r",
							"const customerCount = parseInt(pm.collectionVariables.get(\"customerCount\"))\r",
							"const currentCustomerId = pm.response.json().id\r",
							"\r",
							"if (currentCustomerId < customerCount){\r",
							"    postman.setNextRequest(\"Post a customer\")\r",
							"} else {\r",
							"    postman.setNextRequest(\"Get all customers\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false,
				"followRedirects": false
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \r\n    \"firstName\":\"{{$randomFirstName}}\",\r\n    \"lastName\":\"{{$randomLastName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"phone\":\"{{$randomPhoneNumber}}\",\r\n    \"address\":\"{{$randomStreetAddress}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/customers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"customers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all customers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Get all customers from REST API.\r",
							" * Test 1: Test that response status code is 200.\r",
							" * Test 2: Test that response gives right amount of customers.\r",
							" */\r",
							"\r",
							"// Test 1\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2\r",
							"pm.test(\"Righ amount of customers are returned\", ()=>{\r",
							"    pm.expect(pm.response.json().length).to.eql(parseInt(pm.collectionVariables.get(\"customerCount\")))\r",
							"})\r",
							"\r",
							"// Set random customer id to collection variable\r",
							"pm.collectionVariables.set(\"randomId\", Math.floor(Math.random() * parseInt(pm.collectionVariables.get(\"customerCount\"))));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false,
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/customers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"customers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a customer with id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Get customer with random value generated in previous test and save it to collection variable.\r",
							" * Test 1: Test that response status code is 200.\r",
							" */\r",
							"\r",
							"// Test 1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Save random customer to collection variable \"randomCustomer\"\r",
							"const randomCustomer = JSON.stringify(pm.response.json())\r",
							"pm.collectionVariables.set(\"randomCustomer\", randomCustomer)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false,
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/customers/{{randomId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"customers",
						"{{randomId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Update customer with new information.\r",
							" * Test 1: Test that response status code is 200.\r",
							" * Test 2: Test that information is changed compared to \"randomCustomer\" collection variable\r",
							" */\r",
							"\r",
							"// Test 1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2\r",
							"pm.test(\"Customer data updated\", () => {\r",
							"    pm.expect(JSON.stringify(pm.response.json())).to.not.eql(pm.collectionVariables.get(\"randomCustomer\"))\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false,
				"followRedirects": false
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \r\n    \"firstName\":\"{{$randomFirstName}}\",\r\n    \"lastName\":\"{{$randomLastName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"phone\":\"{{$randomPhoneNumber}}\",\r\n    \"address\":\"{{$randomStreetAddress}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/customers/{{randomId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"customers",
						"{{randomId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Delete customer with random id.\r",
							" * Test 1: Test that response status code is 200.\r",
							" */\r",
							"\r",
							"// Test 1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false,
				"followRedirects": false
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/customers/{{randomId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"customers",
						"{{randomId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:8080/api",
			"type": "string"
		},
		{
			"key": "customerCount",
			"value": "100",
			"type": "string"
		},
		{
			"key": "randomId",
			"value": ""
		},
		{
			"key": "randomCustomer",
			"value": ""
		}
	]
}